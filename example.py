# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _example
else:
    import _example

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _example.delete_SwigPyIterator

    def value(self):
        return _example.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _example.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _example.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _example.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _example.SwigPyIterator_equal(self, x)

    def copy(self):
        return _example.SwigPyIterator_copy(self)

    def next(self):
        return _example.SwigPyIterator_next(self)

    def __next__(self):
        return _example.SwigPyIterator___next__(self)

    def previous(self):
        return _example.SwigPyIterator_previous(self)

    def advance(self, n):
        return _example.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _example.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _example.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _example.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _example.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _example.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _example.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _example:
_example.SwigPyIterator_swigregister(SwigPyIterator)
class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _example.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _example.IntVector___nonzero__(self)

    def __bool__(self):
        return _example.IntVector___bool__(self)

    def __len__(self):
        return _example.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _example.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _example.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _example.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _example.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _example.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _example.IntVector___setitem__(self, *args)

    def pop(self):
        return _example.IntVector_pop(self)

    def append(self, x):
        return _example.IntVector_append(self, x)

    def empty(self):
        return _example.IntVector_empty(self)

    def size(self):
        return _example.IntVector_size(self)

    def swap(self, v):
        return _example.IntVector_swap(self, v)

    def begin(self):
        return _example.IntVector_begin(self)

    def end(self):
        return _example.IntVector_end(self)

    def rbegin(self):
        return _example.IntVector_rbegin(self)

    def rend(self):
        return _example.IntVector_rend(self)

    def clear(self):
        return _example.IntVector_clear(self)

    def get_allocator(self):
        return _example.IntVector_get_allocator(self)

    def pop_back(self):
        return _example.IntVector_pop_back(self)

    def erase(self, *args):
        return _example.IntVector_erase(self, *args)

    def __init__(self, *args):
        _example.IntVector_swiginit(self, _example.new_IntVector(*args))

    def push_back(self, x):
        return _example.IntVector_push_back(self, x)

    def front(self):
        return _example.IntVector_front(self)

    def back(self):
        return _example.IntVector_back(self)

    def assign(self, n, x):
        return _example.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _example.IntVector_resize(self, *args)

    def insert(self, *args):
        return _example.IntVector_insert(self, *args)

    def reserve(self, n):
        return _example.IntVector_reserve(self, n)

    def capacity(self):
        return _example.IntVector_capacity(self)
    __swig_destroy__ = _example.delete_IntVector

# Register IntVector in _example:
_example.IntVector_swigregister(IntVector)
class Int16Vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _example.Int16Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _example.Int16Vector___nonzero__(self)

    def __bool__(self):
        return _example.Int16Vector___bool__(self)

    def __len__(self):
        return _example.Int16Vector___len__(self)

    def __getslice__(self, i, j):
        return _example.Int16Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _example.Int16Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _example.Int16Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _example.Int16Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _example.Int16Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _example.Int16Vector___setitem__(self, *args)

    def pop(self):
        return _example.Int16Vector_pop(self)

    def append(self, x):
        return _example.Int16Vector_append(self, x)

    def empty(self):
        return _example.Int16Vector_empty(self)

    def size(self):
        return _example.Int16Vector_size(self)

    def swap(self, v):
        return _example.Int16Vector_swap(self, v)

    def begin(self):
        return _example.Int16Vector_begin(self)

    def end(self):
        return _example.Int16Vector_end(self)

    def rbegin(self):
        return _example.Int16Vector_rbegin(self)

    def rend(self):
        return _example.Int16Vector_rend(self)

    def clear(self):
        return _example.Int16Vector_clear(self)

    def get_allocator(self):
        return _example.Int16Vector_get_allocator(self)

    def pop_back(self):
        return _example.Int16Vector_pop_back(self)

    def erase(self, *args):
        return _example.Int16Vector_erase(self, *args)

    def __init__(self, *args):
        _example.Int16Vector_swiginit(self, _example.new_Int16Vector(*args))

    def push_back(self, x):
        return _example.Int16Vector_push_back(self, x)

    def front(self):
        return _example.Int16Vector_front(self)

    def back(self):
        return _example.Int16Vector_back(self)

    def assign(self, n, x):
        return _example.Int16Vector_assign(self, n, x)

    def resize(self, *args):
        return _example.Int16Vector_resize(self, *args)

    def insert(self, *args):
        return _example.Int16Vector_insert(self, *args)

    def reserve(self, n):
        return _example.Int16Vector_reserve(self, n)

    def capacity(self):
        return _example.Int16Vector_capacity(self)
    __swig_destroy__ = _example.delete_Int16Vector

# Register Int16Vector in _example:
_example.Int16Vector_swigregister(Int16Vector)
class FloatVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _example.FloatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _example.FloatVector___nonzero__(self)

    def __bool__(self):
        return _example.FloatVector___bool__(self)

    def __len__(self):
        return _example.FloatVector___len__(self)

    def __getslice__(self, i, j):
        return _example.FloatVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _example.FloatVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _example.FloatVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _example.FloatVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _example.FloatVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _example.FloatVector___setitem__(self, *args)

    def pop(self):
        return _example.FloatVector_pop(self)

    def append(self, x):
        return _example.FloatVector_append(self, x)

    def empty(self):
        return _example.FloatVector_empty(self)

    def size(self):
        return _example.FloatVector_size(self)

    def swap(self, v):
        return _example.FloatVector_swap(self, v)

    def begin(self):
        return _example.FloatVector_begin(self)

    def end(self):
        return _example.FloatVector_end(self)

    def rbegin(self):
        return _example.FloatVector_rbegin(self)

    def rend(self):
        return _example.FloatVector_rend(self)

    def clear(self):
        return _example.FloatVector_clear(self)

    def get_allocator(self):
        return _example.FloatVector_get_allocator(self)

    def pop_back(self):
        return _example.FloatVector_pop_back(self)

    def erase(self, *args):
        return _example.FloatVector_erase(self, *args)

    def __init__(self, *args):
        _example.FloatVector_swiginit(self, _example.new_FloatVector(*args))

    def push_back(self, x):
        return _example.FloatVector_push_back(self, x)

    def front(self):
        return _example.FloatVector_front(self)

    def back(self):
        return _example.FloatVector_back(self)

    def assign(self, n, x):
        return _example.FloatVector_assign(self, n, x)

    def resize(self, *args):
        return _example.FloatVector_resize(self, *args)

    def insert(self, *args):
        return _example.FloatVector_insert(self, *args)

    def reserve(self, n):
        return _example.FloatVector_reserve(self, n)

    def capacity(self):
        return _example.FloatVector_capacity(self)
    __swig_destroy__ = _example.delete_FloatVector

# Register FloatVector in _example:
_example.FloatVector_swigregister(FloatVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _example.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _example.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _example.DoubleVector___bool__(self)

    def __len__(self):
        return _example.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _example.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _example.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _example.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _example.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _example.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _example.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _example.DoubleVector_pop(self)

    def append(self, x):
        return _example.DoubleVector_append(self, x)

    def empty(self):
        return _example.DoubleVector_empty(self)

    def size(self):
        return _example.DoubleVector_size(self)

    def swap(self, v):
        return _example.DoubleVector_swap(self, v)

    def begin(self):
        return _example.DoubleVector_begin(self)

    def end(self):
        return _example.DoubleVector_end(self)

    def rbegin(self):
        return _example.DoubleVector_rbegin(self)

    def rend(self):
        return _example.DoubleVector_rend(self)

    def clear(self):
        return _example.DoubleVector_clear(self)

    def get_allocator(self):
        return _example.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _example.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _example.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _example.DoubleVector_swiginit(self, _example.new_DoubleVector(*args))

    def push_back(self, x):
        return _example.DoubleVector_push_back(self, x)

    def front(self):
        return _example.DoubleVector_front(self)

    def back(self):
        return _example.DoubleVector_back(self)

    def assign(self, n, x):
        return _example.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _example.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _example.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _example.DoubleVector_reserve(self, n)

    def capacity(self):
        return _example.DoubleVector_capacity(self)
    __swig_destroy__ = _example.delete_DoubleVector

# Register DoubleVector in _example:
_example.DoubleVector_swigregister(DoubleVector)

def square(*args):
    return _example.square(*args)

def mySumInt(vec):
    return _example.mySumInt(vec)

def mySumFloatBB(vec):
    return _example.mySumFloatBB(vec)

def multiplyDouble(vec, b):
    return _example.multiplyDouble(vec, b)

def multiplyInt(vec, b):
    return _example.multiplyInt(vec, b)

def multiplyFloat(a, b):
    return _example.multiplyFloat(a, b)

def mySumDouble(*args):
    return _example.mySumDouble(*args)

